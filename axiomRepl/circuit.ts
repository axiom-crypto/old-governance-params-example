//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue,
  CircuitValue256
} from "@axiom-crypto/core/halo2-js";
const defaultInputs = {
  nftContract: "0x7EDC6e6c487658075f6A359e68E4C223a54dCfC9",
  snapshotBlock: 10040665,
  mintBlock: 10040663,
  mintTxNo: 2,
  vote: 1
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  nftContract: CircuitValue;
  snapshotBlock: CircuitValue;
  mintBlock: CircuitValue;
  mintTxNo: CircuitValue;
  vote: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  { nftContract, snapshotBlock, mintBlock, mintTxNo, vote }: CircuitValueInputs
) => {
  const { constant, add, sum, and, or, isEqual, checkEqual, log } = halo2Lib;
  const { getReceipt, getSolidityMapping, addToCallback } = axiomData;
  // Autonomous Community Governance
  // Example NFT mint tx here:
  // https://goerli.etherscan.io/tx/0x562053660e01a69b7739d8953fb923bd1312b5a4439c6a88d5eaccee6fb1895f#eventlog
  //
  // Transfer (index_topic_1 address from, index_topic_2 address to, uint256 tokens)
  const transferEventSchema =
    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
  const transferLog = getReceipt(mintBlock, mintTxNo).log(0);

  // 1. check that the address that emitted the transfer is the NFT contract
  const contractAddr = transferLog.address();
  checkEqual(contractAddr.toCircuitValue(), nftContract);

  // 2. check that the tx is a mint tx (from = address(0))
  const fromAddr = transferLog.topic(1, transferEventSchema);
  checkEqual(fromAddr.toCircuitValue(), constant(0));

  // 3. get the minter's address and the id of the NFT
  const toAddr = transferLog.topic(2, transferEventSchema);
  const tokenId = transferLog.topic(3, transferEventSchema);

  // 4. check that at the snapshot block, the ownerOf(tokenId) is still toAddr
  const mapping = getSolidityMapping(snapshotBlock, nftContract, 2);
  const owner = mapping.key(tokenId);
  checkEqual(owner.toCircuitValue(), toAddr.toCircuitValue());

  // 5. check that the vote is 1 (yes) or 2 (no)
  const isOne = isEqual(constant(1), vote);
  const isTwo = isEqual(constant(2), vote);
  const isVoteValid = or(isOne, isTwo);
  checkEqual(isVoteValid, constant(1));

  // 5. add [nft holder address, tokenId, vote] to the callback
  // to be passed to the on-chain contract for consumption
  addToCallback(toAddr);
  addToCallback(tokenId);
  addToCallback(vote);
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  130,
  130,
  77,
  226,
  219,
  58,
  80,
  94,
  10,
  205,
  9,
  250,
  181,
  70,
  99,
  213,
  37,
  34,
  149,
  20,
  53,
  197,
  180,
  102,
  227,
  138,
  49,
  90,
  163,
  228,
  159,
  20,
  27,
  115,
  158,
  189,
  93,
  51,
  6,
  197,
  240,
  69,
  120,
  86,
  19,
  167,
  217,
  112,
  232,
  17,
  168,
  187,
  240,
  228,
  249,
  57,
  11,
  31,
  43,
  172,
  221,
  65,
  254,
  22,
  16,
  49,
  115,
  66,
  224,
  243,
  227,
  63,
  212,
  112,
  190,
  230,
  234,
  63,
  131,
  206,
  35,
  166,
  190,
  242,
  27,
  123,
  67,
  170,
  135,
  34,
  88,
  56,
  145,
  214,
  54,
  0,
  246,
  76,
  192,
  9,
  101,
  214,
  216,
  76,
  129,
  25,
  230,
  32,
  221,
  6,
  135,
  243,
  21,
  188,
  52,
  240,
  251,
  75,
  253,
  138,
  151,
  1,
  35,
  174,
  65,
  30,
  214,
  36,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  49,
  187,
  12,
  58,
  193,
  215,
  61,
  215,
  182,
  62,
  110,
  84,
  149,
  122,
  152,
  151,
  234,
  35,
  17,
  236,
  97,
  112,
  236,
  132,
  144,
  125,
  165,
  0,
  200,
  202,
  83,
  14,
  188,
  9,
  234,
  155,
  164,
  123,
  7,
  181,
  107,
  80,
  244,
  44,
  78,
  197,
  9,
  68,
  180,
  43,
  63,
  165,
  224,
  147,
  109,
  212,
  233,
  184,
  251,
  222,
  214,
  6,
  30,
  45,
  236,
  253,
  72,
  34,
  25,
  71,
  2,
  99,
  233,
  89,
  22,
  162,
  104,
  116,
  125,
  49,
  34,
  118,
  26,
  194,
  239,
  151,
  255,
  62,
  218,
  62,
  93,
  75,
  52,
  221,
  110,
  32,
  213,
  61,
  206,
  130,
  137,
  94,
  64,
  121,
  222,
  86,
  132,
  62,
  129,
  45,
  12,
  28,
  6,
  1,
  123,
  52,
  113,
  194,
  161,
  87,
  67,
  101,
  142,
  209,
  129,
  161,
  25,
  18,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  36,
  17,
  89,
  112,
  244,
  157,
  162,
  109,
  151,
  77,
  135,
  205,
  75,
  24,
  128,
  41,
  202,
  191,
  72,
  113,
  63,
  37,
  59,
  119,
  142,
  191,
  165,
  201,
  27,
  143,
  224,
  45,
  171,
  113,
  77,
  86,
  221,
  14,
  27,
  9,
  244,
  17,
  85,
  68,
  23,
  70,
  78,
  157,
  111,
  178,
  40,
  217,
  86,
  213,
  160,
  89,
  165,
  81,
  113,
  123,
  41,
  3,
  160,
  37,
  29,
  72,
  230,
  45,
  79,
  68,
  105,
  39,
  148,
  201,
  200,
  172,
  128,
  76,
  204,
  49,
  102,
  164,
  107,
  5,
  14,
  177,
  56,
  32,
  119,
  161,
  4,
  20,
  212,
  111,
  222,
  39,
  224,
  203,
  174,
  133,
  42,
  252,
  25,
  202,
  235,
  189,
  44,
  250,
  239,
  252,
  20,
  223,
  8,
  26,
  2,
  92,
  36,
  117,
  148,
  153,
  72,
  241,
  250,
  230,
  229,
  125,
  85,
  15
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
